#TIMEHORIZON
T = 8760;

#NODE H2O_STORAGE
// data from the Remote Hub from Berger et al.

#PARAMETERS
unit_power_kt_h = 0;
unit_energy_kt = 0;
energy_water = 0;
pre_installed_capacity_energy = 0;                  // kt(h2o)
pre_installed_capacity_power = 0;                   // kt(h2o)/h
max_capacity_energy = 10000.0;                      // kt(h2o)
max_capacity_power = 1000;                          // kt(h2o)/h
// data from Remote hub 2030
capex_power_existing = 1.55923;                     // M€/kt(h2o)/h
capex_energy_existing = 0.065;                      // M€/kt(h2o)
fom_power_existing = 0.0312;                        // M€/kt(h2o)/h/yr
fom_energy_existing = 0.0013;                       // M€/kt(h2o)/yr
vom_power_existing = 0.0;                           // M€/kt(h2o)
vom_energy_existing = 0.0;                          // M€/kt(h2o)
lifetime_power_existing = 30;                       // years
lifetime_energy_existing = 30;                      // years
// data from Remote hub 2030
capex_power = 1.55923;                              // M€/kt(h2o)/h
capex_energy = 0.065;                               // M€/kt(h2o)
fom_power = 0.0312;                                 // M€/kt(h2o)/h/yr
fom_energy = 0.0013;                                // M€/kt(h2o)/yr
vom_power = 0.0;                                    // M€/kt(h2o)
vom_energy = 0.0;                                   // M€/kt(h2o)
lifetime_power = 30;                                // years
lifetime_energy = 30;                               // years
conversion_factor_electricity = 0.00036;            // GWh(e)/kt(h20)
charge_efficiency = 1;
discharge_efficiency = 1;
self_discharge = 1; 
nb_year = T/8760;
wacc = 0.07;
max_charged = 1;
// yearly capex
yearly_capex_power = capex_power * wacc / (1 - (1 + wacc)**(-lifetime_power));          // M€/kt(h2o)/h
yearly_capex_energy = capex_energy * wacc / (1 - (1 + wacc)**(-lifetime_energy));       // M€/kt(h2o)
// used to compute the total cost of the system after the optimisation
yearly_capex_power_existing = capex_power_existing * wacc / (1 - (1 + wacc)**(-lifetime_power_existing));               // M€/kt(h2o)/h/yr
yearly_capex_energy_existing = capex_energy_existing * wacc / (1 - (1 + wacc)**(-lifetime_energy_existing));            // M€/kt(h2o)/yr
yearly_existing_cost = (yearly_capex_power_existing + fom_power_existing) * pre_installed_capacity_power 		          
                     + (yearly_capex_energy_existing + fom_energy_existing) * pre_installed_capacity_energy; 	        // M€/yr


#VARIABLES
internal: new_energy_capacity;                      // kt(h2o)
internal: new_power_capacity;                       // kt(h2o)/h
external: charged[T];                               // kt(h2o) 
internal: state_of_charge[T];                       // kt(h2o)
external: discharged[T];                            // kt(h2o)
external: e_consumed[T];                            // GWh(e)

#CONSTRAINTS
charged[t] >= 0;
state_of_charge[t] >= 0;
discharged[t] >= 0;
new_energy_capacity >= 0;
new_power_capacity >= 0;
e_consumed[t] >= 0;
state_of_charge[0] == self_discharge * state_of_charge[T-1] + charge_efficiency * charged[T-1] - 1/discharge_efficiency * discharged[T-1];
state_of_charge[t] <= new_energy_capacity + pre_installed_capacity_energy;
state_of_charge[i+1] == self_discharge * state_of_charge[i] + charge_efficiency * charged[i] - 1/discharge_efficiency * discharged[i] for i in [0:T-2];
discharged[t] <= new_power_capacity + pre_installed_capacity_power;
charged[t] <= max_charged * (new_power_capacity + pre_installed_capacity_power);
e_consumed[t] == conversion_factor_electricity * charged[t];

#OBJECTIVES
min fix_cost_power: (yearly_capex_power + fom_power) * nb_year * new_power_capacity;            // M€
min fix_cost_energy: (yearly_capex_energy + fom_energy) * nb_year * new_energy_capacity;        // M€
min var_cost_power: vom_power * charged[t];                                                     // M€
min var_cost_energy: vom_energy * state_of_charge[t];                                           // M€