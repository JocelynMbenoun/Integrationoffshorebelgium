#TIMEHORIZON
T = 8760;

#NODE NG_STORAGE
// Berger et al. for parameters

#PARAMETERS
unit_power_GW = 0;
unit_energy_GWh = 0;
energy_natural_gas = 0;
pre_installed_capacity_power = 7;                                   // GW(ch4_lhv)
pre_installed_capacity_energy = 8000;                               // GWh(ch4_lhv)
max_capacity_power = 7;                                             // GW(ch4_lhv)
max_capacity_energy = 8000;                                         // GWh(ch4_lhv)
// Berger et al. 2019, cost assumed at 0 as no new capacity can be added in Belgium
capex_power_existing = 0.0;                                         // M€/GW(ch4_lhv)
capex_energy_existing = 0.1;                                        // M€/GWh(ch4_lhv) 
fom_power_existing = 0.0;                                           // M€/GW(ch4_lhv)/yr
fom_energy_existing = 0.0025;                                       // M€/GWh(ch4_lhv)/yr
vom_power_existing = 0.0;                                           // k€/MWh(ch4_lhv) of energy charged
vom_energy_existing = 0;                                            // k€/MWh(ch4_lhv) of energy stored
lifetime_power_existing = 80;                                       // years
lifetime_energy_existing = 80;                                      // years
// no change in the cost predicted
capex_power = 0.0;                                                  // M€/GW(ch4_lhv)
capex_energy = 0.1;                                                 // M€/GWh(ch4_lhv)
fom_power = 0.0;                                                    // M€/GW(ch4_lhv)/yr
fom_energy = 0.0025;                                                // M€/GWh(ch4_lhv)/yr
vom_power = 0.0;                                                    // M€/GWh(ch4_lhv) of energy charged
vom_energy = 0;                                                     // M€/GWh(ch4_lhv) of energy stored  
max_charged = 0.5;                                                  // fraction of the power capacity that limit the amount of gas that can be charged in 1 hour                         
lifetime_power = 80;                                                // years
lifetime_energy = 80;                                               // years
roundtrip_efficiency = 0.975;                                        
charge_efficiency = roundtrip_efficiency**(1/2);
discharge_efficiency = charge_efficiency;
min_SOC = 0.0;                                                       
self_discharge = 1;                                                  
// Other                                              
planned_outage = 0.0/52;                                            
nb_year = T/8760;
// yearly capex
wacc = 0.07;
yearly_capex_power = capex_power * wacc / (1 - (1 + wacc)**(-lifetime_power));                                          // M€/GW(ch4_lhv)/yr
yearly_capex_energy = capex_energy * wacc / (1 - (1 + wacc)**(-lifetime_energy));                                       // M€/GWh(ch4_lhv)/yr
// used to compute the total cost of the system after the optimisation
yearly_capex_power_existing = capex_power_existing * wacc / (1 - (1 + wacc)**(-lifetime_power_existing));               // M€/GW(ch4_lhv)/yr
yearly_capex_energy_existing = capex_energy_existing * wacc / (1 - (1 + wacc)**(-lifetime_energy_existing));            // M€/GWh(ch4_lhv)/yr
yearly_existing_cost = (yearly_capex_power_existing + fom_power_existing) * pre_installed_capacity_power 		          
                     + (yearly_capex_energy_existing + fom_energy_existing) * pre_installed_capacity_energy; 	        // M€/yr


#VARIABLES
internal: new_energy_capacity;                                      // GWh(ch4_lhv)
internal: new_power_capacity;                                       // GW(ch4_lhv)
external: charged[T];                                               // GWh(ch4_lhv) - charged
external: discharged[T];                                            // GWh(ch4_lhv) - discharged
internal: state_of_charge[T];                                       // GWh(ch4_lhv)

#CONSTRAINTS
new_energy_capacity >= 0;
new_energy_capacity <= max_capacity_energy - pre_installed_capacity_energy;
new_power_capacity >= 0;
new_power_capacity <= max_capacity_power - pre_installed_capacity_power;
charged[t] >= 0;
discharged[t] >= 0;
state_of_charge[t] >= 0;
state_of_charge[0] == self_discharge * state_of_charge[T-1] + charge_efficiency * charged[T-1] - 1/discharge_efficiency * discharged[T-1];
min_SOC * (pre_installed_capacity_energy + new_energy_capacity) <= state_of_charge[t];
state_of_charge[t] <= (pre_installed_capacity_energy + new_energy_capacity);
state_of_charge[i+1] == self_discharge * state_of_charge[i] + charge_efficiency * charged[i] - 1/discharge_efficiency * discharged[i] for i in [0:T-2];
discharged[t] <= pre_installed_capacity_power + new_power_capacity;
charge_efficiency * charged[t] <= max_charged * (pre_installed_capacity_power + new_power_capacity);
sum(charged[i] for i in [0:T-1]) <= (1 - planned_outage) * new_power_capacity * T;
sum(discharged[i] for i in [0:T-1]) <= (1 - planned_outage) * new_power_capacity * T;

#OBJECTIVES
min fix_cost_power: (yearly_capex_power + fom_power) * nb_year * new_power_capacity;                                    // M€
min fix_cost_energy: (yearly_capex_energy + fom_energy) * nb_year * new_energy_capacity;                                // M€
min var_cost_power: vom_power * charged[t];                                                                             // M€
min var_cost_energy: vom_energy * state_of_charge[t];                                                                   // M€